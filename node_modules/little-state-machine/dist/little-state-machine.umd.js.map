{"version":3,"file":"little-state-machine.umd.js","sources":["../src/constants.ts","../src/logic/storeFactory.ts","../src/StateMachineContext.tsx","../src/stateMachine.tsx"],"sourcesContent":["export const STORE_DEFAULT_NAME = '__LSM__';\nexport const STORE_ACTION_NAME = '__LSM_NAME__';\nexport const PERSIST_BEFORE_UNLOAD = 'beforeUnload';\n","import { STORE_DEFAULT_NAME } from '../constants';\nimport { MiddleWare, GlobalState } from '../types';\n\nfunction StoreFactory() {\n  let options = {\n    name: STORE_DEFAULT_NAME,\n    middleWares: [] as MiddleWare[],\n    storageType: {} as Storage,\n    persist: '',\n  };\n  let state: GlobalState = {};\n\n  try {\n    options.storageType =\n      typeof sessionStorage !== 'undefined'\n        ? window.sessionStorage\n        : ({} as Storage);\n  } catch {}\n\n  return {\n    updateStore(defaultValues: GlobalState) {\n      try {\n        state =\n          JSON.parse(options.storageType.getItem(options.name) || '') ||\n          defaultValues;\n      } catch {\n        state = defaultValues;\n      }\n    },\n    saveStore() {\n      options.storageType.setItem(options.name, JSON.stringify(state));\n    },\n    get state() {\n      return state;\n    },\n    set state(value) {\n      state = value;\n    },\n    get options() {\n      return options;\n    },\n    set options(value) {\n      options = value;\n    },\n  };\n}\n\nexport default StoreFactory();\n","import * as React from 'react';\nimport storeFactory from './logic/storeFactory';\nimport { StateMachineContextValue } from './types';\nimport { PERSIST_BEFORE_UNLOAD } from './constants';\n\ntype PropsChildren = {\n  children?: React.ReactNode;\n};\n\nconst StateMachineContext = React.createContext<StateMachineContextValue>(\n  undefined as any,\n);\n\nexport const StateMachineProvider: React.FC<PropsChildren> = ({ children }) => {\n  const [state, setState] = React.useState(storeFactory.state);\n\n  React.useEffect(() => {\n    if (storeFactory.options.persist === PERSIST_BEFORE_UNLOAD) {\n      window.onbeforeunload = () => storeFactory.saveStore();\n      storeFactory.options.storageType.removeItem(storeFactory.options.name);\n    }\n  }, []);\n\n  return (\n    <StateMachineContext.Provider value={{ state, setState }}>\n      {children}\n    </StateMachineContext.Provider>\n  );\n};\n\nexport const useStateMachineContext = () =>\n  React.useContext<StateMachineContextValue>(StateMachineContext);\n","import * as React from 'react';\nimport { useStateMachineContext } from './StateMachineContext';\nimport storeFactory from './logic/storeFactory';\nimport {\n  StateMachineOptions,\n  GlobalState,\n  AnyCallback,\n  AnyActions,\n  ActionsOutput,\n} from './types';\nimport { PERSIST_BEFORE_UNLOAD, STORE_ACTION_NAME } from './constants';\n\nexport function createStore(\n  defaultState: GlobalState,\n  options?: StateMachineOptions,\n) {\n  if (options) {\n    storeFactory.options = {\n      ...storeFactory.options,\n      ...options,\n    };\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window !== 'undefined') {\n      window.__LSM_NAME__ = storeFactory.options.name;\n      window.__LSM_RESET__ = () =>\n        storeFactory.options.storageType.removeItem(storeFactory.options.name);\n    }\n  }\n\n  storeFactory.updateStore(defaultState);\n}\n\nconst actionTemplate =\n  <TCallback extends AnyCallback>(\n    setState: React.Dispatch<React.SetStateAction<GlobalState>>,\n    callback: TCallback,\n  ) =>\n  (payload: Parameters<TCallback>[1]) => {\n    if (process.env.NODE_ENV !== 'production') {\n      window[STORE_ACTION_NAME] = callback.name;\n    }\n\n    storeFactory.state = callback(storeFactory.state, payload);\n\n    if (storeFactory.options.middleWares) {\n      storeFactory.state = storeFactory.options.middleWares.reduce(\n        (currentValue, currentFunction) =>\n          currentFunction(currentValue, callback.name, payload) || currentValue,\n        storeFactory.state,\n      );\n    }\n\n    setState(storeFactory.state);\n    storeFactory.options.persist !== PERSIST_BEFORE_UNLOAD &&\n      storeFactory.saveStore();\n  };\n\nexport function useStateMachine<\n  TCallback extends AnyCallback,\n  TActions extends AnyActions<TCallback>,\n>(\n  actions?: TActions,\n): {\n  actions: ActionsOutput<TCallback, TActions>;\n  state: GlobalState;\n} {\n  const { state, setState } = useStateMachineContext();\n  const actionsRef = React.useRef(\n    Object.entries(actions || {}).reduce(\n      (previous, [key, callback]) =>\n        Object.assign({}, previous, {\n          [key]: actionTemplate(setState, callback),\n        }),\n      {} as ActionsOutput<TCallback, TActions>,\n    ),\n  );\n\n  return {\n    actions: actionsRef.current,\n    state,\n  };\n}\n"],"names":["PERSIST_BEFORE_UNLOAD","options","name","middleWares","storageType","persist","state","sessionStorage","window","updateStore","defaultValues","JSON","parse","getItem","saveStore","setItem","stringify","value","StoreFactory","StateMachineContext","React","createContext","undefined","children","useState","storeFactory","setState","useEffect","onbeforeunload","removeItem","Provider","defaultState","actions","useContext","actionsRef","useRef","Object","entries","reduce","previous","assign","callback","payload","currentValue","currentFunction","actionTemplate","current"],"mappings":"qjBAEaA,EAAwB,iBCCrC,WACE,IAAIC,EAAU,CACZC,KDL8B,UCM9BC,YAAa,GACbC,YAAa,GACbC,QAAS,IAEPC,EAAqB,GAEzB,IACEL,EAAQG,YACoB,oBAAnBG,eACHC,OAAOD,eACN,GACP,UAEF,MAAO,CACLE,qBAAYC,GACV,IACEJ,EACEK,KAAKC,MAAMX,EAAQG,YAAYS,QAAQZ,EAAQC,OAAS,KACxDQ,EACF,SACAJ,EAAQI,IAGZI,qBACEb,EAAQG,YAAYW,QAAQd,EAAQC,KAAMS,KAAKK,UAAUV,KAEvDA,YACF,OAAOA,GAELA,UAAMW,GACRX,EAAQW,GAENhB,cACF,OAAOA,GAELA,YAAQgB,GACVhB,EAAUgB,IAKDC,GCtCTC,EAAsBC,EAAMC,mBAChCC,0OAG2D,gBAAGC,IAAAA,WACpCH,EAAMI,SAASC,EAAanB,OAA/CA,OAAOoB,OASd,OAPAN,EAAMO,UAAU,WACVF,EAAaxB,QAAQI,UAAYL,IACnCQ,OAAOoB,eAAiB,kBAAMH,EAAaX,aAC3CW,EAAaxB,QAAQG,YAAYyB,WAAWJ,EAAaxB,QAAQC,QAElE,IAGDkB,gBAACD,EAAoBW,UAASb,MAAO,CAAEX,MAAAA,EAAOoB,SAAAA,IAC3CH,2BCZLQ,EACA9B,GAEIA,IACFwB,EAAaxB,aACRwB,EAAaxB,QACbA,IAYPwB,EAAahB,YAAYsB,+BAgCzBC,GAKA,MDrCAZ,EAAMa,WAAqCd,GCqCnCb,IAAAA,MAAOoB,IAAAA,SACTQ,EAAad,EAAMe,OACvBC,OAAOC,QAAQL,GAAW,IAAIM,OAC5B,SAACC,kBACCH,OAAOI,OAAO,GAAID,gBArCxB,SACEb,EACAe,mBAEDC,GAKCjB,EAAanB,MAAQmC,EAAShB,EAAanB,MAAOoC,GAE9CjB,EAAaxB,QAAQE,cACvBsB,EAAanB,MAAQmB,EAAaxB,QAAQE,YAAYmC,OACpD,SAACK,EAAcC,UACbA,EAAgBD,EAAcF,EAASvC,KAAMwC,IAAYC,GAC3DlB,EAAanB,QAIjBoB,EAASD,EAAanB,OACtBmB,EAAaxB,QAAQI,UAAYL,GAC/ByB,EAAaX,aAiBF+B,CAAenB,aAE1B,KAIJ,MAAO,CACLM,QAASE,EAAWY,QACpBxC,MAAAA"}